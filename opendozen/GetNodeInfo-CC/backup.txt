GetNodeInfo-CC/GNICC_Main.py at a9d75bbeae9d5bcad770b9836f4453098fd81a6f ・ shiqing0477/GetNodeInfo-CC ・ GitHub来源网址： https://github.com/shiqing0477/GetNodeInfo-CC/blob/a9d75bbeae9d5bcad770b9836f4453098fd81a6f/GNICC_Main.py


'''
#File Name: GNI_CCMain.py
#Version : v1.0
#Author : Li Desheng
#Time : 2012-10-31
#Usage : The project main file for the CC
'''

#!/usr/bin/python


def main():

    if GNI_MainOpt.ConFlag:
        print "Connet OK! "
        
        GNI_SendQueue.Run_DealQueue()
        GNI_DealConDat.Run_DealConDat()
        GNI_PushNodeInfo.Run_PushInfo()
        print "Run sucessfully!"
      
if __name__ == "__main__":
main()


GetNodeInfo-CC/GNI_Socket/socket-svr.py at a9d75bbeae9d5bcad770b9836f4453098fd81a6f ・ shiqing0477/GetNodeInfo-CC ・ GitHub来源网址： https://github.com/shiqing0477/GetNodeInfo-CC/blob/a9d75bbeae9d5bcad770b9836f4453098fd81a6f/GNI_Socket/socket-svr.py


#!/usr/bin/python

import eventlet
from eventlet.green import socket

PORT=6000
BACKLOG=2

def Svr_Handle(client):
    client.send("Hello!I'm a server made by eventlet...")
    while True:
        c = client.recv(1000)
        if not c: break
        print "Recv From %s:%s" %(client,c)
        #client.send(c)
    client.close()
    print "Something is wrong with %s..." %client

server = eventlet.listen(('0.0.0.0', PORT))
pool = eventlet.GreenPool(50)
print "ChatServer starting up on port %s" % PORT

while True:
    print "Waiting for a client..."
    new_sock, address = server.accept()
    print "A client joined..."
    
    pool.spawn_n(Svr_Handle, new_sock)

print "OK?"


GetNodeInfo-CC/GNI_Socket/GNI_Socket.py at a9d75bbeae9d5bcad770b9836f4453098fd81a6f ・ shiqing0477/GetNodeInfo-CC ・ GitHub来源网址： https://github.com/shiqing0477/GetNodeInfo-CC/blob/a9d75bbeae9d5bcad770b9836f4453098fd81a6f/GNI_Socket/GNI_Socket.py


'''
#File Name: GNI_Socket.py
#Version : v1.0
#Author : Li Desheng
#Time : 2012-10-30
#Usage : About eventlet socket
'''

import time
from _UDPSocket_ import _SocketUDP
import GNI_Opt

class GNISocket(_SocketUDP.UDPSocket):
    def __init__(self):
        super(GNISocket,self).__init__(('0.0.0.0',GNI_Opt.conf_Port),GNI_Opt.conf_MaxLen,5)
        if(self.Flag==False):
            #print 'Socket initial failed! Now exit!'
            #exit()
            #return False
            raise
    

#mGNISocket=GNISocket(('0.0.0.0',GNI_Opt.conf_Port),GNI_Opt.conf_MaxLen,5)

'''
#Just for test
i=0
while i<3:
i=i+1
print i
time.sleep(10)
print mSocket.Socket_Read(500)
print mSocket.Socket_Read(500)
#Socket_Read(5,mSocket,GNI_Opt.ReadLen)
'''


GetNodeInfo-CC/GNI_Socket/GNI_Opt.py at a9d75bbeae9d5bcad770b9836f4453098fd81a6f ・ shiqing0477/GetNodeInfo-CC ・ GitHub来源网址： https://github.com/shiqing0477/GetNodeInfo-CC/blob/a9d75bbeae9d5bcad770b9836f4453098fd81a6f/GNI_Socket/GNI_Opt.py


'''
#File Name: GNI_Opt.py
#Version : v1.0
#Author : Li Desheng
#Time : 2012-7-23
#Usage : Initial the opinions used by GNI_SocketCLit.py
'''
import sys
sys.path.append("..") #to make the system path outside
import GNI_Conf.GNI_conf as Conf

#---The server connect information---
SvrIP='218.192.168.175'
#SvrIP='127.0.0.1'
SvrPort=6000

#---The local infomation---
conf_ClitName='Node1'
conf_Port=Conf.confopts['CollectorSvr']['CSPort']['Value']

conf_MaxLen=Conf.confopts['ConDat']['CDMaxLen']['Value']
print '-----------------------------------------'
print Conf.confopts
print '-----------------------------------------'


GetNodeInfo-CC/GNI_Socket/_UDPSocket_/_SocketUDP.py at a9d75bbeae9d5bcad770b9836f4453098fd81a6f ・ shiqing0477/GetNodeInfo-CC ・ GitHub来源网址： https://github.com/shiqing0477/GetNodeInfo-CC/blob/a9d75bbeae9d5bcad770b9836f4453098fd81a6f/GNI_Socket/_UDPSocket_/_SocketUDP.py


'''
#File Name: _SocketUDP.py
#Version : v1.0
#Author : Li Desheng
#Time : 2012-10-30
#Usage : About eventlet socket
'''

import eventlet
from eventlet.green import socket

class UDPSocket(object):
    def __init__(self,TAddress,MaxLen,TimeOut=500):
        self.Flag,self.mySocket=self.__Socket_Init(TAddress)
        self.MaxLen=MaxLen
        self.TimeOut=TimeOut
        
    def Socket_Read(self,TimeOut):
        try:
            self.mySocket.settimeout(TimeOut)
            data, addr = self.mySocket.recvfrom(self.MaxLen)
            #print "%s Recv:%s" %(addr,data)
            return True,data,addr
        
        except socket.error as e:
            #print "Read erro:%s" %e
            return False,e,0

    def Socket_Read_(self,TimeOut):
        self.mySocket.settimeout(TimeOut)
        data, addr = self.mySocket.recvfrom(self.MaxLen)
        return data,addr
      

    def Socket_Send(self,PackInfo,TDestAddr,TimeOut):
        try:
            self.mySocket.settimeout(TimeOut)
            self.mySocket.sendto(PackInfo,TDestAddr)
            #print "Send to %s:%s" %(TDestAddr,PackInfo)
            return True,data
        
        except socket.error as e:
            print "Read erro:%s" %e
            return False,e
        
    def __Socket_Init(self,TAddress):
        try:
            mySocket=socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            mySocket.bind(TAddress)
            #print "Bind OK!"
            return True,mySocket
        
        except socket.error as e:
            #print 'Socket Error : %s' % e
            return False,e




'''
#Just for test
mSocket=UDPSocket(('0.0.0.0',7100),512,5)
'''


GetNodeInfo-CC/GNI_Log/GNI_Logs.py at a9d75bbeae9d5bcad770b9836f4453098fd81a6f ・ shiqing0477/GetNodeInfo-CC ・ GitHub来源网址： https://github.com/shiqing0477/GetNodeInfo-CC/blob/a9d75bbeae9d5bcad770b9836f4453098fd81a6f/GNI_Log/GNI_Logs.py


'''
#File Name: GNI_Logs.py
#Version : v1.0
#Author : Li Desheng
#Time : 2012-10-31
#Usage :
'''
# -*- coding:gbk -*-
import os

from _log_ import _Log as log

class GNILog(log.LogCtls):
    def __init__(self,ConfigFile,Name):
        super(GNILog,self).__init__(ConfigFile,Name)


'''
#Just for a test
mylog=GNILog('E:\My_Works\Python\GetNodeInfo\GetNodeInfo-120827\GetNodeInfo-CC\GNIConfLog\logging.conf','lds')
mylog.WriteLog('DEBUG','ok')
mylog.WriteLog('DEBU','ok')
mylog.SetName('hloo')
mylog.WriteLog('CRIT','err')
'''


GetNodeInfo-CC/GNI_Excutes/GNI_Excutes.py at a9d75bbeae9d5bcad770b9836f4453098fd81a6f ・ shiqing0477/GetNodeInfo-CC ・ GitHub来源网址： https://github.com/shiqing0477/GetNodeInfo-CC/blob/a9d75bbeae9d5bcad770b9836f4453098fd81a6f/GNI_Excutes/GNI_Excutes.py


'''
#File Name: GNI_Excutes.py
#Version : v1.0
#Author : Li Desheng
#Time : 2012-10-30
#Usage :
'''
# -*- coding:gbk -*-
import os
import time
import Queue
import threading
import sys
import socket
sys.path.append('..')
import GNI_Socket.GNI_Socket as Socket
import GNI_Conf.GNI_conf as Conf
import GNI_Log.GNI_Logs as Log

TEXEConf={
    'EXE1':{
        'ID':1,
        'CMD':'',
        'Queue':0,
        'JobMaxSize':200
    },
    'EXE2':{
        'ID':2,
        'CMD':'',
        'Queue':0,
        'JobMaxSize':200
    },
    'EXE3':{
        'ID':3,
        'CMD':'',
        'Queue':0,
        'JobMaxSize':200
    },
    'EXE4':{
        'ID':4,
        'CMD':'',
        'Queue':0,
        'JobMaxSize':200
    },
    'EXEMapReduce':{
        'ID':0,
        'CMDs':'',
        'Exes':[],
        'RecvMaxLen':1000,
        'Socket':''
    }
}

mlog=Log.GNILog(Conf.confopts['LogConf']['LogConfFile']['Value'],'GNI_Excutes')
try:
    mGNISocket=Socket.GNISocket()
except:
    mlog.WriteLog('CRIT','NANI~~Bind the port failed!Exit now!')
    exit()

class ExcuteFactory:
    def factory(self, which,mTEXEOpts):
        if which == "EXE1":
            return EXE1(mTEXEOpts)
        if which == "EXE2":
            return EXE2(mTEXEOpts)
        if which == "EXE3":
            return EXE3(mTEXEOpts)
        if which == "EXE4":
            return EXE4(mTEXEOpts)
        if which == "EXEMapReduce":
            mTEXEOpts['Socket']=mGNISocket
            
            return EXEMapReduce(mTEXEOpts)
        else:
            return None

class Excutes(threading.Thread):
    def __init__(self,mTEXEOpts):
        super(Excutes,self).__init__()
        self.__JobQueue=Queue.PriorityQueue(mTEXEOpts['JobMaxSize'])
        self.__ID=mTEXEOpts['ID']
        self.__CMD=mTEXEOpts['CMD']
        self.__lock = threading.Lock()
        self.__QEvent = threading.Event()
        
    def AppendJob(self,TJob):
        self.__lock.acquire ()
        self.__JobQueue.put(TJob)
        self.__lock.release ()
        Self.__QEvent.set()
        
    def GetJob(self):
        try:
            job = self.__JobQueue.get_nowait()
            print "ding job:%s;left:%d" %(job,self.__JobQueue.qsize())
            print job
        except Queue.Empty:
            self.__QEvent.clear()
            self.__QEvent.wait()
            job=False
        return job
        
    def run(self):
        pass


class EXEMapReduce(threading.Thread):
    def __init__(self,mTEXEOpts):
        super(EXEMapReduce,self).__init__()
        self.__Socket=mTEXEOpts['Socket']
        self.__TEXEs=mTEXEOpts['Exes']
        
    def AppendEXEQues(self,TEXEQueue):
        self.__TEXEQueues.append(TEXEQueue)
    def DeleteEXEQue(self,EXEName):
        pass
    def run(self):
        print "\ndo EXEMapReduce"
        print self.__TEXEs
        while True:
            try:
                info,addr=self.__Socket.Socket_Read_(5)
            except socket.timeout as e:
                pass
            except Exception,ec:
                print 'nn'
            
            
    
class EXE1(Excutes):
    def __init__(self,mTEXEOpts):
        super(EXE1,self).__init__(mTEXEOpts)
        
    def run(self):
        while True:
            print "\ndo exe1"
            time.sleep(2)

class EXE2(Excutes):
    def __init__(self,mTEXEOpts):
        super(EXE2,self).__init__(mTEXEOpts)
        
    def run(self):
        while True:
            print "\ndo exe2"
            time.sleep(2)

class EXE3(Excutes):
    def __init__(self,mTEXEOpts):
        super(EXE3,self).__init__(mTEXEOpts)
        
    def run(self):
        print "\ndo exe3"

class EXE4(Excutes):
    def __init__(self,mTEXEOpts):
        super(EXE4,self).__init__(mTEXEOpts)
        
    def run(self):
        print "\ndo exe4"


#Just for a test
#exelist=[('EXEMapReduce',0),('EXE1',100),('EXE2',100),('EXE3',100),('EXE4',200)]
fac=ExcuteFactory()
for exename in TEXEConf:
    exe=fac.factory(exename,TEXEConf[exename])
    #print "%s,%s" %(exename[0],exename[1])
    if exename!='EXEMapReduce':
        TEXEConf['EXEMapReduce']['Exes'].append((exe,TEXEConf[exename]['CMD']))
    exe.start()


GetNodeInfo-CC/GNI_Conf/config.ini at a9d75bbeae9d5bcad770b9836f4453098fd81a6f ・ shiqing0477/GetNodeInfo-CC ・ GitHub来源网址： https://github.com/shiqing0477/GetNodeInfo-CC/blob/a9d75bbeae9d5bcad770b9836f4453098fd81a6f/GNI_Conf/config.ini


[config]
name1=123
name2=12.34
name3=sfagt

[CollectorSvr]
CSIP=218.192.168.175
CSPort=7110

[ConDat]
CDVersion=V1.0
CDSmarKey=cloud
CDMaxLen=514



[db]
sqlConnection=*****


GetNodeInfo-CC/GNI_Conf/GNI_conf.py at a9d75bbeae9d5bcad770b9836f4453098fd81a6f ・ shiqing0477/GetNodeInfo-CC ・ GitHub来源网址： https://github.com/shiqing0477/GetNodeInfo-CC/blob/a9d75bbeae9d5bcad770b9836f4453098fd81a6f/GNI_Conf/GNI_conf.py


'''
#File Name: GNI_conf.py
#Version : v1.0
#Author : Li Desheng
#Time : 2012-10-30
#Usage :
'''
# -*- coding:gbk -*-
import os
from _ini_ import _iniCFG


confopts={
    'CollectorSvr':{
        'CSIP':{
            'Value':'',
            'Type':'STRING',
            'default':'127.0.0.1',
            'help':'The IP of the CollectorSvr.'
        },
        'CSPort':{
            'Value':'',
            'Type':'INT',
            'default':7100,
            'help':'The server port of the CollectorSvr.'
        }
        
    },
    'ConDat':{
        'CDVersion':{
            'Value':'',
            'Type':'STRING',
            'default':'V1.0',
            'help':'The version of the communicate data.'
        },
        'CDSmarKey':{
            'Value':'',
            'Type':'STRING',
            'default':'cloud',
            'help':'Use this key to make a sequence for communication.'
        },
        'CDMaxLen':{
            'Value':'',
            'Type':'INT',
            'default':513,
            'help':'The maximum length of the conmunicate data package.'
        },
        'CDDefinationFile':{
            'Value':'',
            'Type':'DTRING',
            'default':'E:\My_Works\Python\GetNodeInfo\GetNodeInfo-120827\GetNodeInfo-CC\GNIConfLog\ConDatDef.ini',
            'help':'The configuration file for UDP conmmunication.'
        }
    },
    'db':{
        'sqlConnection':{
            'Value':'',
            'Type':'STRING',
            'default':'sqlite:///$state_path/$sqlite_db',
            'help':'The connection string to the database.'
        }
    },
    'LogConf':{
        'LogConfFile':{
            'Value':'',
            'Type':'STRING',
            'default':'E:\My_Works\Python\GetNodeInfo\GetNodeInfo-120827\GetNodeInfo-CC\GNIConfLog\logging.conf',
            'help':'Tell the file for log config.'
        }
    }
}

#Notice:Use the real path!
confPath='E:\My_Works\Python\GetNodeInfo\GetNodeInfo-120827\GetNodeInfo-CC\GNIConfLog\config.ini'#os.getcwd()+'/config.ini'

'''
With this class initial,the "Value" in "confopts" will be set.
'''
class ConfOpts:
    def __init__(self,m_confopts,m_confPath):
        ini=_iniCFG.INIFILE(m_confPath)
        ini.Init()
        for session in m_confopts:
            for key in m_confopts[session]:
                m_confopts[session][key]['Value']=ini.GetValue(session,
                                                               key,
                                                               m_confopts[session][key]['Type'],
                                                               m_confopts[session][key]['default'])
                
        ini.UnInit()
        
def __GetConfOpts(m_confopts,m_confPath):
    ini=_iniCFG.INIFILE(m_confPath)
    ini.Init()
    for session in m_confopts:
        for key in m_confopts[session]:
            m_confopts[session][key]['Value']=ini.GetValue(session,
                                                            key,
                                                            m_confopts[session][key]['Type'],
                                                            m_confopts[session][key]['default'])
                
    ini.UnInit()
    
            
def GetConfOpts(m_confopts,m_confPath):
    __GetConfOpts(m_confopts,m_confPath)


#Get conf value now
GetConfOpts(confopts,confPath)


GetNodeInfo-CC/GNI_Conf/_ini_/_iniCFG.py at a9d75bbeae9d5bcad770b9836f4453098fd81a6f ・ shiqing0477/GetNodeInfo-CC ・ GitHub来源网址： https://github.com/shiqing0477/GetNodeInfo-CC/blob/a9d75bbeae9d5bcad770b9836f4453098fd81a6f/GNI_Conf/_ini_/_iniCFG.py


'''
#File Name: _iniCFG.py
#Version : v1.0
#Author : Li Desheng
#Time : 2012-10-30
#Usage :
'''
# -*- coding:gbk -*-
import ConfigParser, os
class INIFILE:
    def __init__(self, filename):
        self.filename = filename
        self.initflag = False
        self.cfg = None
        self.inihandle = None
        self.inihandle = None
    def Init(self,rw='r'):
        self.cfg = ConfigParser.ConfigParser()
        try:
            self.inihandle = open(self.filename, rw)
            self.cfg.readfp(self.inihandle)
            self.initflag = True
        except:
            self.initflag = False
        return self.initflag
    
    def UnInit(self):
        if self.initflag:
            self.inihandle.close()
            
    def GetValue(self, Section, Key, Type,Default = ""):
        try:
            value = self.cfg.get(Section, Key)
            if Type=='INT':
                value=int(value)
            elif Type=='FLOAT':
                value=float(value)
        except:
            value = Default
        return value

        
    def SetValue(self, Section, Key, Value):
        try:
            self.cfg.set(Section, Key, Value)
        except:
            self.cfg.add_section(Section)
            self.cfg.set(Section, Key, Value)
            self.cfg.write(self.inihandle)
     
            
def GetValue(FileName,Section,Key,Type,Default):
    myini=INIFILE(FileName)
    myini.Init()
    Value=myini.GetValue(Section,Key,Type,Default)
    myini.UnInit()
    return Value

#print 'get:%s' %GetValue(os.getcwd() +'/config.ini','config','name4','FLOAT',"....")


GetNodeInfo-CC/GNI_ConDatDef/_ConDatDef.py at a9d75bbeae9d5bcad770b9836f4453098fd81a6f ・ shiqing0477/GetNodeInfo-CC ・ GitHub来源网址： https://github.com/shiqing0477/GetNodeInfo-CC/blob/a9d75bbeae9d5bcad770b9836f4453098fd81a6f/GNI_ConDatDef/_ConDatDef.py


'''
#File Name: GNI_Libs.py
#Version : v1.0
#Author : Li Desheng
#Time : 2012-10-30
#Usage :
'''
# -*- coding:gbk -*-
from ctypes import *
import os
from _log_ import _Log as Log
from _lib_ import _lib as Libs

class ConDatDef(Log.LogCtls,Libs._lib_):
    def __init__(self,
                 LogConfigFile="E:\My_Works\Python\GetNodeInfo\GetNodeInfo-120827\GetNodeInfo-CC\GNIConfLog\logging.conf",
                 LoggerName='ConDatDef',
                 libfile="E:\My_Works\Python\GetNodeInfo\GetNodeInfo-120827\GetNodeInfo-CC\GNILibs\ConDatDef.dll"):
        try:
            Log.LogCtls.__init__(self,LogConfigFile,LoggerName)
            Libs._lib_.__init__(self,libfile)
            print self.logger
        except Exception,e:
            self.WriteLog('CRIT',e)

    def MakSendPack(self,job):
        #make a pointer to a (job[0]-1) dimenssion arry
        pAddList = (c_char_p * job[0])()
        
        i=0
        while i<job[0]:
            pAddList[i]=job[i+1]
            i+=1
        DestAddr=(c_char*500)()
        SendLen=self.lib.MakeConPack(byref(DestAddr),job[0],pointer(pAddList),0xa0,49)
        
        return DestAddr[0:SendLen]

#Just for a test
mcondef=ConDatDef()
print mcondef.MakSendPack((2,'458\0','adb\0'))


GetNodeInfo-CC/GNI_ConDatDef/_log_/_Log.py at a9d75bbeae9d5bcad770b9836f4453098fd81a6f ・ shiqing0477/GetNodeInfo-CC ・ GitHub来源网址： https://github.com/shiqing0477/GetNodeInfo-CC/blob/a9d75bbeae9d5bcad770b9836f4453098fd81a6f/GNI_ConDatDef/_log_/_Log.py


'''
#File Name: _Log.py
#Version : v1.0
#Author : Li Desheng
#Time : 2012-10-31
#Usage : log class
'''

#!/usr/bin/env python

import logging
import logging.config

class LogCtls(object):
    def __init__(self,ConfigFile,Name):
        logging.config.fileConfig(ConfigFile)
        self.logger = logging.getLogger(Name)

    def WriteLog(self,Level,Msg):
        if Level=='DEBUG':
            self.logger.debug(Msg)
        elif Level=='INFO':
            self.logger.info(Msg)
        elif Level=='WARN':
            self.logger.warn(Msg)
        elif Level=='ERR':
            self.logger.warn(Msg)
        elif Level=='CRIT':
            self.logger.critical(Msg)
        else:
            self.logger.info('Sorry,your level is wrong.Please use "DEBUG","INFO","WARN","ERR" or "CRIT".')
            print 'Sorry,your level is wrong.Please use "DEBUG","INFO","WARN","ERR" or "CRIT".'

    def SetLoggerName(self,Name):
        self.logger = logging.getLogger(Name)
        
'''
#Just for a test
mylog=LogCtls('logging.conf','test')
mylog.WriteLog('DEBUG','ok')
mylog.WriteLog('DEBU','ok')
mylog.SetName('hloo')
mylog.WriteLog('CRIT','err')
'''


GetNodeInfo-CC/GNI_ConDatDef/_lib_/_lib.py at a9d75bbeae9d5bcad770b9836f4453098fd81a6f ・ shiqing0477/GetNodeInfo-CC ・ GitHub来源网址： https://github.com/shiqing0477/GetNodeInfo-CC/blob/a9d75bbeae9d5bcad770b9836f4453098fd81a6f/GNI_ConDatDef/_lib_/_lib.py


'''
#File Name: _lib.py
#Version : v1.0
#Author : Li Desheng
#Time : 2012-10-30
#Usage :
'''
# -*- coding:gbk -*-
import os
from ctypes import *

class _lib_(object):
    def __init__(self,libfile):
        self.lib=cdll.LoadLibrary(libfile)


GetNodeInfo-CC/GNIConfLog/logging.conf at a9d75bbeae9d5bcad770b9836f4453098fd81a6f ・ shiqing0477/GetNodeInfo-CC ・ GitHub来源网址： https://github.com/shiqing0477/GetNodeInfo-CC/blob/a9d75bbeae9d5bcad770b9836f4453098fd81a6f/GNIConfLog/logging.conf


[loggers]
keys=root,example

[handlers]
keys=consoleHandler,rotateFileHandler

[formatters]
keys=simpleFormatter

[formatter_simpleFormatter]
format=[%(asctime)s] %(levelname)8s %(name)s : %(message)s

[logger_root]
level=DEBUG
handlers=consoleHandler,rotateFileHandler

[logger_example]
level=DEBUG
handlers=consoleHandler,rotateFileHandler
qualname=example
propagate=0

[handler_consoleHandler]
class=StreamHandler
level=DEBUG
formatter=simpleFormatter
args=(sys.stdout,)

[handler_rotateFileHandler]
class=handlers.RotatingFileHandler
level=DEBUG
formatter=simpleFormatter
args=('E:\My_Works\Python\GetNodeInfo\GetNodeInfo-120827\GetNodeInfo-CC\GNIConfLog\GNICC.log', 'a', 200000, 9)


GetNodeInfo-CC/GNIConfLog/config.ini at a9d75bbeae9d5bcad770b9836f4453098fd81a6f ・ shiqing0477/GetNodeInfo-CC ・ GitHub来源网址： https://github.com/shiqing0477/GetNodeInfo-CC/blob/a9d75bbeae9d5bcad770b9836f4453098fd81a6f/GNIConfLog/config.ini


[config]
name1=123
name2=12.34
name3=sfagt

[CollectorSvr]
CSIP=218.192.168.175
CSPort=7102

[ConDat]
CDVersion=V1.0
CDSmarKey=cloud
CDMaxLen=514
CDDefinationFile=E:\My_Works\Python\GetNodeInfo\GetNodeInfo-120827\GetNodeInfo-CC\GNIConfLog\ConDatDef.ini

[LogConf]
LogConfFile=E:\My_Works\Python\GetNodeInfo\GetNodeInfo-120827\GetNodeInfo-CC\GNIConfLog\logging.conf


[db]
sqlConnection=*****


